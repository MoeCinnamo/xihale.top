<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>自动 mount</title>
    <url>/auto-mount/</url>
    <content><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>有几个分区得自动<code>mount</code></p>
<h2 id="言"><a href="#言" class="headerlink" title="言"></a>言</h2><ol>
<li><p>挂载需要自动挂载的分区</p>
</li>
<li><p>使用<code>blkid</code>命令获取分区的<code>UUID</code>并<code>复制</code></p>
</li>
<li><p>打开<code>/etc/fstab</code>自动挂载分区标识文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/fstab</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加/修改即可，格式：</p>
<blockquote>
<p>请将<code>uuid</code>替换为<code>刚刚复制的 uuid</code>，</p>
<p>然后把绑定目录改一下，一般只需要把<code>xihale</code>改为你<code>自己的用户名</code>，把<code>dir</code>改为需要绑定到的<code>文件夹名</code>即可，</p>
<p>最后把<code>ext4</code>改为你需要的分区格式，一般是<code>ntfs</code>或<code>fat32</code></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UUID=uuid /media/xihale/dir ext4 defaults 0 0</span><br></pre></td></tr></table></figure>
<p>一般来说，后面两个参数都填<code>0</code>，<a href="https://www.rmssf.com/news/fstab dump pass values.html">详解在这</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Beauty-words</title>
    <url>/beauty/</url>
    <content><![CDATA[<h1 id="杂"><a href="#杂" class="headerlink" title="杂"></a>杂</h1><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><blockquote>
<p>送走人间种种别离，送走世间种种变迁，逝者如斯，时光永远不会止步，所以，我们会再度与人萍水相逢，相识相知，一同织下我们的人生</p>
<p>经为流逝的日月，纬为人们的生业</p>
<p>逝者如斯夫，不舍昼夜</p>
</blockquote>
<h2 id="人生态度"><a href="#人生态度" class="headerlink" title="人生态度"></a>人生态度</h2><blockquote>
<p>悲痛的事，温柔以对；难过的事，坚强以对</p>
<p>离别不是失去，而是成长；离别不是终结，而是新生；离别不是放弃，而是成全</p>
<p>长风破浪会有时，直挂云帆济沧海</p>
<p>世有伯乐，然后有千里马，千里马常有，而伯乐不常有，你应该始终坚信着你只是还没有遇到你的伯乐，然后继续向前</p>
<p>斯是陋室，惟吾德馨</p>
<p>三军可夺帅也，匹夫不可夺志也</p>
<p>人不知而不愠，不亦君子乎</p>
<p>出淤泥而不染，濯清涟而不妖</p>
<p>谈笑有鸿儒，往来无白丁</p>
<p>一鼓作气，再而衰，三而竭</p>
<p>近朱者赤，近墨者黑</p>
</blockquote>
<h2 id="学习态度"><a href="#学习态度" class="headerlink" title="学习态度"></a>学习态度</h2><blockquote>
<p>学而不思则罔，思而不学则惑</p>
<p>三人行，必有我师焉，择其善者而从之，其不善者而改之</p>
<p>饭疏食，饮水，曲肱而枕之，乐亦在其中矣</p>
<p>疑惑是成功的钥匙，思考是成功的道路，坚持是成功的大门，我们终将拿起钥匙走过道路打开大门</p>
</blockquote>
<h2 id="自由"><a href="#自由" class="headerlink" title="自由"></a>自由</h2><blockquote>
<p>古老的事物注定要灭亡，既然这样，那就让他们在最后的时光里随心所欲地翱翔吧</p>
</blockquote>
<h2 id="景色"><a href="#景色" class="headerlink" title="景色"></a>景色</h2><blockquote>
<p>天空一碧如洗，灿烂的阳光正从密密的松针的缝隙间射下来，形成一束束粗粗细细的光柱，把飘荡着轻纱般薄雾的林荫照的通亮</p>
<p>雾凇沆砀，天与云与山与水，上下一白，湖上影子，惟长提一痕、湖心亭一点、与余舟一芥、舟中人两三粒而已<sup><a href="#fn_湖心亭看雪" id="reffn_湖心亭看雪">湖心亭看雪</a></sup></p>
<p>苔痕上阶绿，草色入帘青</p>
</blockquote>
<h2 id="青春"><a href="#青春" class="headerlink" title="青春"></a>青春</h2><blockquote>
<p>青春应是一种永恒的心态，它意味着勇敢战胜怯弱，意味着进取战胜安逸</p>
</blockquote>
<h2 id="人生"><a href="#人生" class="headerlink" title="人生"></a>人生</h2><blockquote>
<p>人生如一本书，应该多一些精彩的细节，少一些乏味的字眼；人生如一支歌，应该多一些昂扬的旋律，少一些忧伤的音符；人生如一幅画，应该多一些亮丽的色彩，少一些灰暗的色调</p>
<p>人生似一束鲜花，仔细观赏，才能看到它的美丽；人生似一杯清茶，细细品味，才能赏出真味道。我们应该从失败中从成功中从生活品味出人生的哲理</p>
<p>人生的路漫长而多彩，就像在天边的大海上航行，有时会风平浪静，行驶顺利；而有时却会是惊涛骇浪，行驶艰难。但只要我们心中的灯塔不熄灭，就能沿着自己的航线继续航行。人生的路漫长而多彩，在阳光中我学会欢笑，在阴云中我学会坚强；在狂风中我抓紧希望，在暴雨中我抓紧理想；当我站在中点回望，我走出了一条属于我的生之路</p>
</blockquote>
<h1 id="解"><a href="#解" class="headerlink" title="解"></a>解</h1><blockquote id="fn_湖心亭看雪">
<sup>湖心亭看雪</sup>. 湖面上冰花一片弥漫，天与云与山与水，浑然一体，白茫茫一片。湖上的影子，只有一道长堤的痕迹，一点湖心亭的轮廓，和我的一叶小舟，舟中的两三粒人影罢了<br><br>运用白描的写法，由远及近，由大到小，具有很强的视觉效果；写出了环境的空旷以及人在这空旷环境中显得渺小，简直就是沧海一粟，表达了作者<strong>天人合一</strong>和<strong>弃世脱俗</strong>的高雅情怀<a href="#reffn_湖心亭看雪" title="Jump back to footnote [湖心亭看雪] in the text."> &#8617;</a>
</blockquote>
]]></content>
      <categories>
        <category>writing</category>
      </categories>
  </entry>
  <entry>
    <title>ES6新特性 - promise</title>
    <url>/Promise/</url>
    <content><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>有时候要写函数用到了异步，但是又想强行使他同步执行</p>
<p>这时候就可以用到 <code>Promise</code> 了</p>
<h2 id="言"><a href="#言" class="headerlink" title="言"></a>言</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>首先，一个简单的 <code>Promise</code> 定义是这样的: </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123; <span class="comment">// 这里的 resolve 接收 成功 后返回的值, reject 接收 失败 后返回的值 </span></span><br><span class="line">    <span class="comment">// 注意: resolve 触发 then 方法 reject 触发 catch 方法</span></span><br><span class="line">    <span class="keyword">if</span>(...)&#123;</span><br><span class="line">        resolve(<span class="function"><span class="title">funtion</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">1</span>&#125;);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(...)&#123;</span><br><span class="line">        resolve(<span class="number">2</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        reject(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里我喜欢把 resolve 写成 solve ，把 reject 写成 throwerr ，这是不要紧的</p>
</blockquote>
<h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>然后是进阶的用法: 搭配 <code>async</code> 和 <code>await</code> 实现同步操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里很简单在执行的 await 函数外套一个 async 就行了</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">funtion</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">solve,throwerr</span>)=&gt;</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//这样的话，就不用写 then 了</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="examples"><a href="#examples" class="headerlink" title="examples:"></a>examples:</h3><h4 id="resolve-then"><a href="#resolve-then" class="headerlink" title="resolve + then"></a>resolve + then</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">solve,throwerr</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        solve(alert(<span class="number">1</span>))</span><br><span class="line">    &#125;,<span class="number">1500</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">_</span>=&gt;</span>&#123;alert(<span class="number">2</span>)&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="reject-catch"><a href="#reject-catch" class="headerlink" title="reject + catch"></a>reject + catch</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">solve,throwerr</span>)=&gt;</span>&#123;</span><br><span class="line">   	<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        throwerr(<span class="string">&quot;...&quot;</span>)</span><br><span class="line">    &#125;,<span class="number">1500</span>)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">&quot;error: &quot;</span>,err)&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="resolve-await"><a href="#resolve-await" class="headerlink" title="resolve + await"></a>resolve + await</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">time</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">solve,throwerr</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(solve,time)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">(<span class="keyword">async</span> _=&gt;&#123;</span><br><span class="line">    <span class="keyword">await</span> sleep(<span class="number">1500</span>) <span class="comment">// 原地等待 1500 ms</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;sleep over&quot;</span>) <span class="comment">// 等待结束后执行</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>在Linux下编译exe文件</title>
    <url>/Linux%20build%20exe/</url>
    <content><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>在 <code>linux</code> 下编写 <code>c++</code> ，然后又想直接编译成 <code>exe</code> 发布 ( 懒得去 <code>windows平台</code>重新编译了 )</p>
<h2 id="言"><a href="#言" class="headerlink" title="言"></a>言</h2><p>这里使用 <code>交叉编译器</code> 实现编译 <code>exe文件</code></p>
<ol>
<li><p>安装 <code>mingw-w64</code> 包</p>
<blockquote>
<p> 各个系统有不同的安装命令，此处演示 <code>Ubuntu(Debian)系</code></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install mingw-w64</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>mingw-w64</code> 编译</p>
<blockquote>
<p>其中内置的编译命令太多了，此处仅演示 <code>默认</code> 版本的 <code>g++ 编译器</code> ，其中 <code>main.cpp</code> 是需要编译的源文件</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">i686-w64-mingw32-g++ main.cpp -o main.exe</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>通过无备案域名搭建在国内服务器上的网站</title>
    <url>/%E6%9C%80%E6%96%B0%E6%97%A0%E5%A4%87%E6%A1%88%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>从前，网站只要把端口改掉就能实现访问，但是现在不行了…</p>
<p>而身为一个初中生，并没有资格去执行严苛的域名备案制度，我也无奈</p>
<p>不过，身为一个热血青少年，想要拥有自己的网站(BLOG)也是理所当然的</p>
<blockquote>
<p>注: 本文不违法任何有关网站搭建的法律(目前来说)</p>
<p>请不要使用此方法去做任何违法规则的事，作者概不负责</p>
<p>此方法优缺点</p>
<p>优点：可以支持80端口代理访问</p>
<p>缺点：IP段不支持<code>https</code></p>
</blockquote>
<h2 id="言"><a href="#言" class="headerlink" title="言"></a>言</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>服务商的服务器限制在更底层，因为我们买的服务器一般不是物理机，所以相当于是虚拟机了，也就是说我们根本无法通过修改服务器的配置去防止域名被拦截，所以这条路不通!</p>
<p>而众所周知，服务商限制的是域名的备案与否，这与IP段访问是没什么关系的</p>
<p>（所以你想说，我在说废话吗？）</p>
<p>不，这里贴出我的解决方案</p>
<blockquote>
<p>具体可以实现的功能: url实时刷新，url间接访问</p>
<p>有点晦涩难懂…看效果(这是我用这个方法搭建的站): <a href="https://o.xurl.ga/">Public - xihale</a></p>
</blockquote>
<h3 id="搭建教程"><a href="#搭建教程" class="headerlink" title="搭建教程"></a>搭建教程</h3><ol>
<li><p>首先把这段代码加入到要代理的页面(实现url刷新的基本)</p>
<p>关于这个，如果是php伪静态的话建议加在主题文件内(防止干扰其他页面的问题,<code>OneManager</code>就遇到了这个问题)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    top.postMessage(location.pathname+location.search+location.hash, <span class="string">&quot;*&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后自己用国外服务器搭建一个<code>代理站</code>填入<code>index.html</code>(记得把<code>Page</code>变量改为要代理的页面)</p>
<blockquote>
<p>注: 这里改链接为锚点形式是为了方便单文件读取</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Public - xihale<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">iframe</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">                <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;page&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> Page=<span class="string">`http://`</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;page&quot;</span>).src=Page+location.hash.slice(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.addEventListener(<span class="string">&quot;load&quot;</span>,<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.addEventListener(<span class="string">&quot;message&quot;</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(e.data);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">window</span>.history.pushState(&#123;&#125;,<span class="number">0</span>,location.origin+<span class="string">&#x27;#&#x27;</span>+e.data);</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后访问代理页面就相当于正常访问源站了</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>wireshark抓包入门</title>
    <url>/wireshark%E6%8A%93%E5%8C%85%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>使用 <code>tcpdump</code> 已经满足不了日益增长的抓包需求了</p>
<p>这时得使用更加强大的工具 <code>wireshark</code> 进行底层抓包了</p>
<p>这是官网: <a href="https://www.wireshark.org/">Wireshark</a>(<a href="https://github.xihale.workers.dev/-----https://www.wireshark.org/">如果实在太卡点击这里,自己搭建了个万能镜像站</a>,不过别滥用)</p>
<h2 id="言"><a href="#言" class="headerlink" title="言"></a>言</h2><h3 id="安装-installing"><a href="#安装-installing" class="headerlink" title="安装(installing)"></a>安装(installing)</h3><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>使用包管理器即可,不同系统的安装命令可能不同，这里演示 <code>Ubuntu系</code> 的安装方法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install wireshark # 使用包管理器进行安装</span><br><span class="line">sudo groupadd wireshark # 添加一个 wireshark 用户组</span><br><span class="line">sudo chgrp wireshark /usr/bin/dumpcap # 将底层抓包命令 dumpcap 规划到 wireshark 用户组内 ( 获取执行权 )</span><br><span class="line">sudo chmod 4755 /usr/bin/dumpcap # 设置 wireshark 用户组拥有 root 权限</span><br></pre></td></tr></table></figure>
<p>这里还有一步，请把 <code>xihale</code> 改为你自己的用户名!</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gpasswd -a xihale wireshark # 将自己加入到 wireshark 用户组以执行 wireshark</span><br></pre></td></tr></table></figure>
<h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>去到这里: <a href="https://www.wireshark.org/#download或[镜像站](https://github.xihale.workers.dev/-----https://www.wireshark.org/#download">https://www.wireshark.org/#download或[镜像站](https://github.xihale.workers.dev/-----https://www.wireshark.org/#download</a>)</p>
<p>下载安装包安装即可</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>wstring与string</title>
    <url>/wstring%E4%B8%8Estring/</url>
    <content><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>写<code>SMFL</code>图形化程序的时候遇到了中文显示问题，然后发现用宽字符(<code>wideCharacters</code>:<code>w_char_t</code>,<code>wstring</code>)可以解决问题</p>
<p>但是后来发现<code>wstring</code>的中文输入有问题，就用<code>string</code>来输入了，结果，他们之间没有转换函数…</p>
<h2 id="言"><a href="#言" class="headerlink" title="言"></a>言</h2><blockquote>
<p>然后主要就是通过<code>codecvt</code>字符编码类来间接转换字符类型</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;codecvt&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> std::wstring <span class="title">to_wide_string</span><span class="params">(<span class="keyword">const</span> std::string&amp; input)</span></span>&#123;</span><br><span class="line">	std::wstring_convert&lt;std::codecvt_utf8&lt;<span class="keyword">wchar_t</span>&gt;&gt; converter;</span><br><span class="line">	<span class="keyword">return</span> converter.<span class="built_in">from_bytes</span>(input);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// convert wstring to string </span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> std::string <span class="title">to_byte_string</span><span class="params">(<span class="keyword">const</span> std::wstring&amp; input)</span></span>&#123;</span><br><span class="line">	std::wstring_convert&lt;std::codecvt_utf8&lt;<span class="keyword">wchar_t</span>&gt;&gt; converter;</span><br><span class="line">	<span class="keyword">return</span> converter.<span class="built_in">to_bytes</span>(input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>xsocket</title>
    <url>/xsocket/</url>
    <content><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>身为一个合格的热爱编程的青少年，<br>当然有想过做些什么以凸显自己的技术吧</p>
<p>但是，一个不能互联的程序，玩久了就会失去新意</p>
<p>所以，初一下学期刚开始，我就开始了<code>socket</code>开发</p>
<p>但是，奈何路途不顺，遇到了很多挫折，所以说我很讨厌c语言的socket库(当时是dll没加载成功然后整个代码运行错误，找老师，连老师也不知道什么问题)</p>
<p>然后就停了很久，直到初二上学期接触了动态链接库(dll,so)，才算正式打开了这个项目</p>
<p>后来，算是成功的搞定了<code>socket</code>开发的软件，可是，奈何过程及其艰辛</p>
<p>我可不想以后开发这个都如此艰辛</p>
<p>然后就开始<code>xsocket</code>库的开发了!</p>
<h2 id="言"><a href="#言" class="headerlink" title="言"></a>言</h2><h3 id="何谓-socket"><a href="#何谓-socket" class="headerlink" title="何谓 socket ?"></a>何谓 <code>socket</code> ?</h3><p>“简单”来说，<code>socket</code>就是<code>套接字</code></p>
<p>……</p>
<p>晦涩难懂…</p>
<p>好吧，当然得简化了(大佬勿喷，这里省略了我觉得不必讲的东西，并不是我不知道哈)</p>
<p><code>socket</code>就是<del>钱</del>(<code>线</code> xian)</p>
<p>你没听没错，就是<code>线</code></p>
<p>不过，是<code>纸电话</code>上的<code>线</code>(来自<em>玉子的爱情故事</em>):<br><img src="https://pica.zhimg.com/c76cc5efa69639a783fd29e9f3ebb4e8_r.jpg?source=1940ef5c" alt="`线`"></p>
<p>鉴于是<code>饼藏</code>给<code>玉子</code>，所以: </p>
<p>第一个(<code>饼藏</code>手里的): 服务器</p>
<p>第二个(<code>玉子</code>手里的): 客户端</p>
<p>而中间支持<code>饼藏</code>(<code>服务端</code>)和<code>玉子</code>(<code>客户端</code>)链接的就是<code>线</code>(<code>socket</code>)</p>
<p>所以，总结: 在<code>服务端</code>和<code>客户端</code>建立链接时，得用<code>socket</code></p>
<p>讲完了，就是如此简单…</p>
<h3 id="如何-socket"><a href="#如何-socket" class="headerlink" title="如何 socket"></a>如何 <code>socket</code></h3><p>这个的话，我既然敢写这篇文章</p>
<p>那当然可以拿出点什么</p>
<p>代码已经放在<a href="https://github.com/xihale/xsocket">github</a>(<a href="https://gitee.com/xihale/xsocket">gitee</a>)上了</p>
<p>emm, <code>README.md</code> 中已经有了足够的介绍，这里就补充一点点吧</p>
<ol>
<li><p><code>old</code> 版是原xsocket的备份，没什么用了</p>
<p>仅供参考</p>
</li>
<li><p>普通使用( <code>cli</code> 开发)</p>
<p> 一般用 <code>beta</code> 版的</p>
</li>
<li><p><code>Qt</code> 开发</p>
<p> 鉴于 <code>Qt</code> 的尿性，我提供了专门针对 <code>Qt</code> 的版本: <code>Qt</code> 分支</p>
<p> 虽然 <code>Qt</code> 有提供 <code>socket</code> 库，但是我还是想做…</p>
</li>
<li><p>(暂无，待编辑)</p>
</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>Others but important</title>
    <url>/Others%20but%20important/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/rollups/aes.js"></script><script>
            let p=prompt("我的名字");
            document.querySelector("#article-container").innerHTML=window.CryptoJS.AES.decrypt('U2FsdGVkX1+OX3ZOs7JmFptgr59q7WQ3xuIKctam2Wh7ZmUCLUxpGRV/hnoPAoEuKIrdUpZFYpjLi6Qoq/Ck13CIOHcp/Z/QcMy4a/z3LUoTtegcWasitfa3LaoGphtpQrFzKj0c4KSVokclALV9OYiNgm/PKZxeqiupbkGVF+T1cJHZ5jhmDePDOwz6dyET3aPPE7S8yvivKwFZhQ8e9N+/73nuZap14bCpAedW4nElFHB9YkfiANVCgdsqgxN2n2X9qRxzyNqDq7Iz2WKYyS4lxMzDqH0jmqtYXDmTu2dpYbbHsWakWiJvGevpAiq1FGQVCjHw3G+mmVOAjrbj3ViV/CJHRcshuv1Oc5q5Rp9gDVF7DyP0IUlPagyPQKL0weq+Sr6sv0tlxhPbDXBDCnFLQa23KdCpEKEOmO56Y556GHydeG2cvPZZeCqrpVQMeJwRfl6ZMU7QVdgKyO6NOz/J3g6Ooo6FuWcQzwkjz9W//Ad6pMPM9ZNLjja7y/K1PjgxZGgQLa7Q1K2SrLSsfarizO0iVEe2WIDrvfCAbES6KIlKW5s4nFQLBZJa/w4YMRbJyU8JLQ/TY3f1HlBXU4Lw3zMU9FTetXsskUQU0I/P1YdGxKAiWfyQ8Z/4zFpbfM0DtC7qDd6oHyW/jnEPnW71gpDTpNC6FI2V6qTQo54SmI/qWT9uoaQQ3bi2Mr/n0Ry5xRM84hdq0OobDiJSS3AYpH/ZdlBE5jN/h/9g9cfWPEEbfTaPqOZUy01/gTvOTDQQoystDOZbS0PuFitSifkfn80W1gQ594LQdaJ3q2+w/KgY3/f7qunZtclSc3S0aPXb4Azye7IUPawKfMHzo+YWrWah6ibbsfojD16fFhfjcO4BwmNnM6dmsK2OxX7wgd/4XsB6PefYXMClg6gK7joN1ZXbj5zhHuqi3A19qlbPr46RehZvR+3H4GqGHLflCgYVsmyxo1fAKTxgwCeJS8fGpC28o/PYj0O4aK64ceUanOL/IdHLAvYiTbIQcHBsgTBf8wkkhsFLUtMAnogk8Ni7S1OxgKXNWMy+b4vnlu/0q8kkyvpDaG9bMU/DRIShpoNd7Pof7ULlpR6NZfBQtBIRid91TMCRQqCEvqcTf2AyDD0Z5UtZwnmeRJoIJMqDDz3t+3Ks/hALZYd3lVQUBsixjOboP/FIbSI126i1vDMYwieagBUXqZ7Ol4Pwf1nrMhvMLJ7dd9bJioP67MvxhGNW21zxkuFU3KIAxC+mekzosNldH1SBjSs9PxlPZu/MR+u5HtKAl13KDHFjX+q3Ek2Fep+hgFt6jlOoKO7PFDZOl3eObMwATniW3tY9ce7nLtTjBtrdOCu2RxHTJFswDF9N0D2q8AR97Xw2U/ML4H/ezk2Qg5kIKEGeT+Cdha5D6KoEo++xwJVcKCQWPM8Cns3zWNv/p1iJVwNThjZBHZGqTG8BWIO1A6AEFCLP5P3jri1YqGKmXjCwV3ziDQY7PnZSflm87m+19YbWBNY9N5EdqrIHyvL8F1O+W2owkwLrT5K0qPwJ4YmkkPoAcIYoM5JwE2VMdf8ttcXyOedhPVPC6Z7O3e0k1wJlxB3rR4w10+EO/YIxxzU1T9SJv/oBAy1Vgl9dwKr8E1qaqQhrJ5P14N1akPS3C30k5uoyGWNUZPa2Q+BaHvb5Appvv4x5AowdbUOKuKi/VkqMkHALsZqcVuMYN6U3olfdv92WFPHe+it64jjYqhTXUV2DiZmdw0PVS3PN1f6TpWCXUcHa0c9LoMWowGhqQ+DjaR5XiTcC8opoHE/5MQZxNHS1R9V3oMfDoJeTnSfFlBeZdRUowdxn+P2WNGHLZBMinhznTqkH2oNnSVvpw7sPtbkNYUsd+Q==',p).toString(window.CryptoJS.enc.Utf8)
        </script>]]></content>
  </entry>
  <entry>
    <title>初学VB</title>
    <url>/%E5%88%9D%E5%AD%A6VB/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>天下初中生苦<code>VB</code>久矣</p>
<p><code>VB</code>确实可以在某种程度上帮助我们使用<code>Windows</code></p>
<p>但是?</p>
<p>目前来说像<code>Python</code> <code>Search</code> <code>易语言</code>这些语言也可以迅速帮助我们使用<code>Windows</code></p>
<p>而且他们还在快速迭代,<code>VB</code>就不是了,不过不可否认的是<code>VB</code>入门门槛在某种意义上来说更低</p>
<p>这里说明应付而不是掌握的原因(为什么不真正去学<code>VB</code>)</p>
<p>如果真的想进阶<code>VB</code>可以去<a href="https://docs.microsoft.com/en-us/dotnet/visual-basic">微软visual-basic文档</a>进行具体学习</p>
<p>主要就是: 13年没有更新,<code>msdn</code>不支持,网上教程/样例难找</p>
<p>其次是: 支持的优秀的库很少很难,有兴趣的可以去搜一下<code>VB文件处理</code></p>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><blockquote>
<p>本文所有教程全部基于<code>VB 6.0</code></p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://www.jb51.net/softs/44280.html">完整教程</a></p>
<p>简略教程: </p>
<ol>
<li><a href="https://yy2.guiren21.com/201205/tools/vb60_jb51.rar">下载VB编译器</a></li>
<li>解压后运行<code>SETUP.EXE</code></li>
<li>全部下一步即可,序列号是”111-1111111”</li>
</ol>
<h2 id="图形概念"><a href="#图形概念" class="headerlink" title="图形概念"></a>图形概念</h2><ol>
<li><p>窗体(可以看作是一个很大的控件): 一个存放控件的容器<br>PS: 放苹果的篮子</p>
</li>
<li><p>控件: 实现功能的工具</p>
<p>PS: 各种苹果</p>
</li>
</ol>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>个性化调整控件的样式</p>
<p>PS: 调整苹果、篮子的大小、颜色等</p>
<ol>
<li><p>可视化</p>
<ol>
<li>选中控件(单机选中)</li>
<li>右下角属性窗口中调整<br>PS: 单机属性名时,最下方会有其属性的详细注释(告诉你这个属性是用来调整大小还是颜色的)</li>
</ol>
</li>
<li><p>代码</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line">控件名.属性名=属性值</span><br><span class="line">e.g.<span class="number">1</span>: 苹果A.颜色=红色</span><br><span class="line">e.g.<span class="number">2</span>: 苹果B.毒性=剧毒</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>变量就是一个个存储信息的容器</p>
<p><code>VB</code>中一般使用<code>Integer``String</code>类型</p>
<p>一般定义方法:</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Dim</span> A,B <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line"><span class="keyword">Dim</span> C <span class="keyword">As</span> Float</span><br><span class="line"><span class="keyword">Dim</span> D <span class="keyword">As</span> <span class="type">Double</span></span><br><span class="line"><span class="keyword">Dim</span> str <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line"><span class="keyword">Dim</span> lst <span class="keyword">As</span> <span class="built_in">New</span> List(<span class="keyword">Of</span> <span class="type">Integer</span>) <span class="keyword">From</span> &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;</span><br></pre></td></tr></table></figure>
<h4 id="特殊运算符"><a href="#特殊运算符" class="headerlink" title="特殊运算符"></a>特殊运算符</h4><p><code>=</code>: 赋值符号和等于号</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Dim</span> a <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line"><span class="keyword">If</span> a=<span class="number">1</span> <span class="keyword">Then</span></span><br><span class="line">    Print a</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure>
<p><code>&amp;</code>: 连接符号(连接时要隔一个空格)</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Dim</span> a,b <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">a=<span class="string">&quot;hello&quot;</span></span><br><span class="line">b=<span class="string">&quot;world&quot;</span></span><br><span class="line">Print a &amp; b <span class="comment">&#x27;书写时必须用空格隔开</span></span><br></pre></td></tr></table></figure>
<h3 id="判断语句-分支语句"><a href="#判断语句-分支语句" class="headerlink" title="判断语句(分支语句)"></a>判断语句(分支语句)</h3><p>用于选择性执行代码</p>
<p>这是基本格式: </p>
<h5 id="e-g-1"><a href="#e-g-1" class="headerlink" title="e.g.1"></a>e.g.1</h5><figure class="highlight vb"><table><tr><td class="code"><pre><span class="line">e.g.<span class="number">1</span> (最普通的<span class="keyword">If</span>)</span><br><span class="line"><span class="keyword">If</span> 条件表达式 <span class="keyword">Then</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure>
<h5 id="e-g-2-带Else的If"><a href="#e-g-2-带Else的If" class="headerlink" title="e.g.2 (带Else的If)"></a>e.g.2 (带Else的If)</h5><figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">If</span> 条件表达式 <span class="keyword">Then</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure>
<h5 id="e-g-3-If嵌套"><a href="#e-g-3-If嵌套" class="headerlink" title="e.g.3 (If嵌套)"></a>e.g.3 (If嵌套)</h5><figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">If</span> 条件表达式 <span class="keyword">Then</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">Else</span> <span class="keyword">If</span> 条件表达式 <span class="keyword">Then</span></span><br><span class="line">    	...</span><br><span class="line">    <span class="keyword">Else</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure>
<h5 id="example"><a href="#example" class="headerlink" title="example"></a>example</h5><figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">If</span> <span class="number">1</span>+<span class="number">1</span>=<span class="number">2</span> <span class="keyword">Then</span></span><br><span class="line">    Print <span class="string">&quot;1+1=2&quot;</span></span><br><span class="line"><span class="keyword">Else</span> <span class="keyword">If</span> <span class="number">1</span>+<span class="number">1</span>=<span class="number">3</span> <span class="keyword">Then</span></span><br><span class="line">        Print <span class="string">&quot;1+1=3&quot;</span></span><br><span class="line">    <span class="keyword">Else</span> <span class="keyword">If</span> <span class="number">1</span>+<span class="number">1</span>=<span class="number">4</span> <span class="keyword">Then</span></span><br><span class="line">            Print <span class="string">&quot;1+1=4&quot;</span></span><br><span class="line">        <span class="keyword">Else</span></span><br><span class="line">            Print <span class="string">&quot;1+1=5&quot;</span></span><br><span class="line">        <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure>
<p>当然,你可以无限<code>If</code>下去</p>
<h4 id="进阶-Select"><a href="#进阶-Select" class="headerlink" title="进阶(Select)"></a>进阶(Select)</h4><figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="keyword">Case</span> 表达式</span><br><span class="line"><span class="keyword">Case</span> 值</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">Case</span> 值</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Select</span></span><br></pre></td></tr></table></figure>
<h5 id="example-1"><a href="#example-1" class="headerlink" title="example"></a>example</h5><figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="keyword">Case</span> <span class="number">1</span>+<span class="number">1</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">1</span> <span class="keyword">To</span> <span class="number">5</span></span><br><span class="line">    Print <span class="string">&quot;1&lt;=1+1&lt;=5&quot;</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">6</span>,<span class="number">9</span>,<span class="number">12</span></span><br><span class="line">    Print <span class="string">&quot;1+1=6或9或12&quot;</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">8</span></span><br><span class="line">    Print <span class="string">&quot;1+1=8&quot;</span></span><br><span class="line"><span class="keyword">Case</span> <span class="keyword">Else</span></span><br><span class="line">    Print <span class="string">&quot;1+1=?&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Select</span></span><br></pre></td></tr></table></figure>
<p>当然你可以无限<code>Case</code>下去</p>
<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>适用于重复动作,其中<code>Timer</code>控件其实就是一个延时循环体结构</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">For</span> 计数变量名=值 [<span class="keyword">As</span> 变量类型] <span class="keyword">To</span> 值 [<span class="keyword">Step</span> 值]</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">Next</span> [计数变量名]</span><br></pre></td></tr></table></figure>
<p>这个不是很好理解</p>
<p>还是看<code>example</code>吧</p>
<h5 id="e-g-1-从1加到100"><a href="#e-g-1-从1加到100" class="headerlink" title="e.g.1(从1加到100)"></a>e.g.1(从<code>1</code>加到<code>100</code>)</h5><figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Dim</span> i,a <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line">a=<span class="number">0</span></span><br><span class="line"><span class="keyword">For</span> i=<span class="number">1</span> <span class="keyword">To</span> <span class="number">100</span> <span class="keyword">Step</span> <span class="number">1</span></span><br><span class="line">    a=a+i</span><br><span class="line"><span class="keyword">Next</span> i</span><br><span class="line">Print a</span><br></pre></td></tr></table></figure>
<p>你也可以这样(<code>Step</code>默认<code>1</code>,<code>Next</code>在单循环情况下可省略,循环计数变量会自动定义)</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Dim</span> a <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line">a=<span class="number">0</span></span><br><span class="line"><span class="keyword">For</span> i=<span class="number">1</span> <span class="keyword">To</span> <span class="number">100</span></span><br><span class="line">    a=a+i</span><br><span class="line"><span class="keyword">Next</span></span><br><span class="line">Print a</span><br></pre></td></tr></table></figure>
<h5 id="e-g-2-输出10-100中的奇数"><a href="#e-g-2-输出10-100中的奇数" class="headerlink" title="e.g.2(输出10-100中的奇数)"></a>e.g.2(输出<code>10-100中的奇数</code>)</h5><p>注意: </p>
<ol>
<li>多层循环不能省略<code>Next</code></li>
<li>步长非<code>1</code>不能省略<code>Step</code></li>
</ol>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">For</span> i=<span class="number">1</span> <span class="keyword">To</span> <span class="number">10</span> 	</span><br><span class="line">    <span class="keyword">For</span> j=<span class="number">1</span> <span class="keyword">To</span> <span class="number">9</span> <span class="keyword">Step</span> <span class="number">2</span></span><br><span class="line">        Print <span class="type">String</span>(i) &amp; <span class="type">String</span>(j)</span><br><span class="line">    <span class="keyword">Next</span> j</span><br><span class="line"><span class="keyword">Next</span> i</span><br></pre></td></tr></table></figure>
<h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><p>循环还有很多种,这两种比较重要,最好掌握</p>
<p>不过考试中一般只考<code>For</code>,所以只为了考试的话就不用进阶了</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Do</span> <span class="keyword">while</span> 条件</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">Loop</span></span><br></pre></td></tr></table></figure>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Dim</span> bool <span class="type">Boolean</span></span><br><span class="line"><span class="keyword">Dim</span> i <span class="type">Integer</span></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line">bool=<span class="number">1</span></span><br><span class="line"><span class="keyword">Do</span> <span class="keyword">while</span> bool</span><br><span class="line">    Print i</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">    <span class="keyword">If</span> i=<span class="number">100</span></span><br><span class="line">        bool=<span class="number">0</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">Loop</span></span><br></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><blockquote>
<p>这里以考试的标准来</p>
<p>标’*’的是真实标准与考试标准矛盾的,有兴趣的可以去试试</p>
</blockquote>
<ol>
<li><p>*<code>Textbox</code>最多输入<code>2048</code>个字符</p>
</li>
<li><p><code>Image</code>控件载入图片的方法:</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line">对象名.Picture=LoadPicture(<span class="string">&quot;Path&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line">Img.Picture=LoadPicture(App.Path &amp; <span class="string">&quot;a.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>VB</tag>
      </tags>
  </entry>
  <entry>
    <title>css设计</title>
    <url>/css%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录一些自己的成长</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><ol>
<li>字体<ol>
<li>语言文字:  <a href="http://o.xurl.ga/fonts/HanyiSummerPalace.ttf">HanyiSummerPalace</a></li>
<li>代码:  <a href="http://o.xurl.ga/fonts/FiraCode-Medium.ttf">Fira-Code(Medium)</a></li>
</ol>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Onedrive5T(E5的获取)</title>
    <url>/Onedrive5T/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Office365开发版E5是为开发人员提供的，是微软的官方活动，申请Office 365开发者计划可以获得为期3个月的免费Office365 E5。 而E5计划就包含了25个用于所有Office 365 应用的许可证。如果嫌正版office365贵的话，这可是你免费获取office的好机会了！</p>
<p>PS:过程很麻烦！要有足够耐心，xihale遇到过很多错误！搞了一天！</p>
<p>需要材料：一个microsoft账号（用qq邮箱注册一个就行），一个github账号，一个有耐心的脑，一个外国代理，一个VPS/服务器</p>
<h2 id="申请e5账号"><a href="#申请e5账号" class="headerlink" title="申请e5账号:"></a>申请e5账号:</h2><ol>
<li>进入: <a href="https://developer.microsoft.com/zh-cn/microsoft-365/dev-program">Microsoft 365 开发人员计划</a></li>
<li>登录你的microsoft账号</li>
<li>然后填写信息（随便填）—开始挂代理（google验证码）</li>
<li>然后进入<a href="https://admin.microsoft.com/">Microsoft 365 admin center</a>管理用户，最多25个用户</li>
</ol>
<p>（现在开始，所有登录的账号都是刚刚填的”用户名@域.onmicrosoft.com”）</p>
<ol>
<li><p>进入<a href="https://office.com/">office</a>登录刚刚填的账号，打开onedrive—他会提示正在准备，到这里你就成功了（要等很久，最好过几个小时在看—我就等了1天才好！）</p>
</li>
<li><p>等待OneDrive可以用</p>
</li>
<li><p>默认空间是1t，进入<a href="https://www.imotao.com/go/?url=https://admin.onedrive.com/#v=StorageSettings">Onedrive-默认存储空间修改</a>，登录账号-点击存储-把1024改成5120</p>
</li>
</ol>
<p>试试可不可以正常使用！如果可以就成功了！</p>
<h2 id="设置自动续费"><a href="#设置自动续费" class="headerlink" title="设置自动续费"></a>设置自动续费</h2><blockquote>
<p>参考:<a href="https://qyi.io/archives/687.html">浅忆大佬-E5自动订阅程序</a></p>
<p>PS: 已经续了快1年了</p>
</blockquote>
<p>进入: <a href="https://e5.qyi.io/">E5续订</a>，登录<code>GitHub账号</code></p>
<ol>
<li>进入<a href="https://portal.azure.com/#home">Azure</a>，登录账号</li>
<li><p>搜索应用注册-注册一个新应用：</p>
<ol>
<li><p><code>重定向url</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://e5.qyi.io/outlook/auth2/receive</span><br></pre></td></tr></table></figure></li>
<li><code>受支持的账户类型</code>选<code>那个最长的</code></li>
</ol>
</li>
<li><p>复制”应用程序(客户端)ID”-粘贴到client_id里</p>
</li>
<li><p>点击证书和密码-创建一个客户端密码；复制密码填到client_secre里</p>
</li>
<li>点击授权</li>
</ol>
<h2 id="对接cloudreve网盘-未完成"><a href="#对接cloudreve网盘-未完成" class="headerlink" title="对接cloudreve网盘(未完成)"></a>对接cloudreve网盘(未完成)</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>进入<code>shell</code>界面输入(依赖<code>wget</code>):</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://toolwa.com/github/https://github.com/cloudreve/Cloudreve/releases/download/3.3.2/cloudreve_3.3.2_linux_arm.tar.gz</span><br><span class="line"> &amp;&amp; tar -zxvf cloudreve_3.3.2_linux_arm.tar.gz &amp;&amp; chome +x ./cloudreve &amp;&amp; ./cloudreve</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对接教程得等等,还没来得及写,所以先看视频吧</p>
</blockquote>
<p><a href="https://www.bilibili.com/video/BV1FZ4y1T7jn/">https://www.bilibili.com/video/BV1FZ4y1T7jn/</a></p>
]]></content>
      <categories>
        <category>白嫖 Onedrive</category>
      </categories>
      <tags>
        <tag>白嫖</tag>
        <tag>Onedrive</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-磁盘分析</title>
    <url>/Linux-%E7%A3%81%E7%9B%98%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>linux</code>占空间过大,需要软件进行分析</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>安装<code>ncdu</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install ndcu</span><br></pre></td></tr></table></figure>
<p>检测空间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ncdu -x /</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>letsencrypt 证书生成</title>
    <url>/letsencrypt/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>letsencrypt</code>是一个免费的<code>ssl</code>证书机构</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="安装certbot"><a href="#安装certbot" class="headerlink" title="安装certbot"></a>安装<code>certbot</code></h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install certbot</span><br></pre></td></tr></table></figure>
<h3 id="申请"><a href="#申请" class="headerlink" title="申请"></a>申请</h3><p>把<code>xihale.top</code>改成你要申请的域名即可<br>用户邮箱随便,中间的操作全部填<code>Y</code>,最后它会提示你改<code>TXT</code><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">certbot certonly --preferred-challenges dns --manual  -d *.xihale.top,xihale.top --server https://acme-v02.api.letsencrypt.org/directory</span><br></pre></td></tr></table></figure></p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>搞定没有报错就可以去<code>/etc/letsencrypt/live/xihale.top</code>获取<code>ssl</code>文件了</p>
]]></content>
      <categories>
        <category>letsencrypt</category>
      </categories>
      <tags>
        <tag>letsencrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>Win-磁盘修复</title>
    <url>/win-%E7%A3%81%E7%9B%98%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果一不小心把电脑的磁盘弄坏了(比如写入文件时突然断电)</p>
<h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><p><code>win+x</code>调出<code>PowerShell(管理员)</code></p>
<p>简单一步搞定</p>
<blockquote>
<p>C为坏了的盘符(如果是隐藏的可以先取消隐藏)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkdsk C: /f</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>动态修改Referer欺骗服务器</title>
    <url>/%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9referer/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在做<code>js(electron)</code>版本的蓝奏解析时,发现要修改<code>referer</code>发送请求,但是<code>chrome</code>内核不允许这样做</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><blockquote>
<p>依赖: <code>ipcMain</code>,<code>ipcRenderer</code></p>
</blockquote>
<p>在主进程创建窗口后添加: </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ipcMain.on(<span class="string">&#x27;lanzou&#x27;</span>,<span class="function">(<span class="params">event,args</span>) =&gt;</span> &#123;</span><br><span class="line">  session.defaultSession.webRequest.onBeforeSendHeaders(&#123;<span class="attr">urls</span>: [<span class="string">&quot;*://*/*&quot;</span>]&#125;, <span class="function">(<span class="params">details, callback</span>)=&gt;</span> &#123;</span><br><span class="line">    details.requestHeaders[<span class="string">&#x27;referer&#x27;</span>] = args;</span><br><span class="line">    callback(&#123;<span class="attr">requestHeaders</span>: details.requestHeaders&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在渲染进程内添加:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ipcRenderer.send(<span class="string">&#x27;lanzou&#x27;</span>,url);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注: <code>lanzou</code>是通讯的<code>key</code>,可以替换</p>
<p><code>*://*/*</code>是匹配的<code>url</code> 可修改</p>
<p>此方法会影响其他子进程,不过影响不大,主要看你改了啥,如果只是<code>referer</code>或<code>ua</code>应该不会又啥影响</p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron</title>
    <url>/Electron/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章是赶出来的,所以写的不是很好</p>
<p>主要是讲了如何创建一个 Electron 项目</p>
<blockquote>
<p>注意: <code>Win</code>下的终端要用<code>cmd</code></p>
</blockquote>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>最好先搞个<code>cnpm</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>然后下载<code>Electron</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install -g electron &amp;&amp; cnpm install -g electron-forge</span><br></pre></td></tr></table></figure>
<p>如果执行成功,那就是安装好了</p>
<p>然后 <code>进入项目目录</code> 执行<code>init</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">electron-forge init &amp;&amp; cd node_modules\electron &amp;&amp; npm install</span><br></pre></td></tr></table></figure>
<p>最后,完成了项目的编写可以:</p>
<ol>
<li><p>调试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">electron-forge start</span><br></pre></td></tr></table></figure></li>
<li>运行<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">electron .</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><ol>
<li><p>最优方案</p>
<p>首先安装<code>electron-packager</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install electron-packager</span><br></pre></td></tr></table></figure>
<p>然后把这个加到<code>package.json</code>里的<code>scripts</code>里</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;packager&quot;: &quot;electron-packager ./ programName --platform=win32 --out=./OutApp &quot;</span><br></pre></td></tr></table></figure>
<p>最后运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run packager</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>官方方案(很慢)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run make</span><br></pre></td></tr></table></figure>
<p>如果失败了就先运行下面的代码(自行创建<code>app</code>文件夹)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//在根目录下</span><br><span class="line">npm uninstall electron-store --save //卸载electron-store这个包</span><br><span class="line">cd app &amp;&amp; npm install electron-store --save //在app目录下安装这个包，包的信息会添加到这个目录下的package.json</span><br><span class="line"></span><br><span class="line">//回到根目录</span><br><span class="line">npm run make//成功打包了！！！！</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//请使用 CommonJS 的格式写 require 而不是ES6</span></span><br><span class="line"><span class="keyword">const</span> &#123;app&#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="comment">//错误写法,这可能会编译不过</span></span><br><span class="line"><span class="keyword">import</span> &#123;app&#125; <span class="keyword">from</span> <span class="string">&#x27;electron&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>桌面软件</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>xmysql-一个简单的mysql类</title>
    <url>/xmysql/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近写一个聊天软件, server 端得用到 mysql </p>
<p>但是c++能用的库很少,所以我就对照<a href="https://blog.csdn.net/fengxinlinux/article/details/75675360">大佬rotation的c语言库</a>和官方api文档做了个c++的库</p>
<p>Bug肯定是还有的,不过正常使用应该没啥问题了</p>
<h4 id="xmysql"><a href="#xmysql" class="headerlink" title="xmysql"></a>xmysql</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> XMYSQL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XMYSQL</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql/mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">namespace</span> xihale&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">xmysql</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">xmysql</span>(); <span class="comment">//初始化类</span></span><br><span class="line">        <span class="built_in">xmysql</span>(string host,string username,string password,string dbname,<span class="keyword">unsigned</span> dbport=<span class="number">0</span>); <span class="comment">//连接数据库</span></span><br><span class="line">        ~<span class="built_in">xmysql</span>(); <span class="comment">//关闭数据库连接</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(string host,string username,string password,string dbname,<span class="keyword">unsigned</span> dbport=<span class="number">0</span>)</span></span>; <span class="comment">//连接数据库</span></span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; <span class="built_in">exec</span>(string _exec); <span class="comment">//执行数据库脚本</span></span><br><span class="line">        <span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">error</span><span class="params">()</span></span>; <span class="comment">//获取错误</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        MYSQL *mysql;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h4 id="xmysql-cpp"><a href="#xmysql-cpp" class="headerlink" title="xmysql.cpp"></a>xmysql.cpp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;xmysql.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> xihale;</span><br><span class="line"><span class="keyword">using</span> std::clog;</span><br><span class="line">xmysql::<span class="built_in">xmysql</span>()&#123;</span><br><span class="line">    mysql=<span class="built_in">mysql_init</span>(<span class="literal">NULL</span>); <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">if</span>(mysql==<span class="literal">NULL</span>)<span class="keyword">throw</span> <span class="string">&quot;初始化 mysql 失败&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">xmysql::<span class="built_in">xmysql</span>(string host,string username,string password,string dbname,<span class="keyword">unsigned</span> <span class="keyword">int</span> dbport)&#123;</span><br><span class="line">    <span class="built_in">xmysql</span>(); <span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">init</span>(host,username,password,dbname,dbport);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xmysql::init</span><span class="params">(string host,string username,string password,string dbname,<span class="keyword">unsigned</span> <span class="keyword">int</span> dbport)</span></span>&#123;</span><br><span class="line">    mysql=<span class="built_in">mysql_real_connect</span>(mysql,host.<span class="built_in">c_str</span>(),username.<span class="built_in">c_str</span>(),password.<span class="built_in">c_str</span>(),dbname.<span class="built_in">c_str</span>(),dbport,<span class="literal">NULL</span>,<span class="number">0</span>); <span class="comment">//默认</span></span><br><span class="line">    <span class="keyword">if</span>(mysql==<span class="literal">NULL</span>)<span class="keyword">throw</span> <span class="string">&quot;连接 mysql 失败&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;vector&lt;string&gt;&gt; xmysql::<span class="built_in">exec</span>(string _exec)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">mysql_query</span>(mysql,_exec.<span class="built_in">c_str</span>()))<span class="keyword">throw</span> <span class="string">&quot;数据库语句执行失败&quot;</span>;</span><br><span class="line">    MYSQL_RES *_result=<span class="built_in">mysql_store_result</span>(mysql);</span><br><span class="line">    <span class="keyword">if</span>(_result)&#123;</span><br><span class="line">        <span class="keyword">int</span> fields=<span class="built_in">mysql_num_fields</span>(_result);</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt;result;</span><br><span class="line">        MYSQL_ROW row;</span><br><span class="line">        <span class="keyword">while</span>((row=<span class="built_in">mysql_fetch_row</span>(_result)))&#123;</span><br><span class="line">            vector&lt;string&gt;s;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fields;++i)</span><br><span class="line">                s.<span class="built_in">push_back</span>(row[i]?row[i]:<span class="string">&quot;NULL&quot;</span>);</span><br><span class="line">            result.<span class="built_in">push_back</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">mysql_free_result</span>(_result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">mysql_field_count</span>(mysql)!=<span class="number">0</span>)<span class="keyword">throw</span> <span class="string">&quot;数据库语句执行失败&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> vector&lt;vector&lt;string&gt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">xmysql::error</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">mysql_error</span>(mysql);</span><br><span class="line">&#125;</span><br><span class="line">xmysql::~<span class="built_in">xmysql</span>()&#123;</span><br><span class="line">    <span class="built_in">mysql_close</span>(mysql);</span><br><span class="line">    <span class="built_in">mysql_library_end</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-io</title>
    <url>/Java-io/</url>
    <content><![CDATA[<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; <span class="comment">//引入</span></span><br><span class="line"></span><br><span class="line">Scanner input=<span class="keyword">new</span> Scanner(System.in); <span class="comment">//绑定输入流到input</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a=input.nextInt(); <span class="comment">//输入int,其他类型以此类推</span></span><br><span class="line">String s=input.next(); <span class="comment">//输入String</span></span><br></pre></td></tr></table></figure>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.print(str); <span class="comment">//直接输出</span></span><br><span class="line">System.out.println(str); <span class="comment">//输出加换行</span></span><br><span class="line">System.out.printf(<span class="string">&quot;...&quot;</span>[,...]); <span class="comment">//格式化输出,玩过c语言的都深有体会</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>python-蓝凑云直链解析</title>
    <url>/python-lanzou/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>就是看到很多大佬写了,不过99%<code>没开源</code>,1%用的<code>e语言</code></p>
<p>所以,我先写个<code>py</code>版本的,然后再去做个<code>php</code>版的(有时间的话)</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>花了很多时间,遇到了很多<code>坑</code>,没有<code>注释</code>…</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># The code from xihale.top</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">UA = <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4537.0 Safari/537.36 Edg/93.0.926.1&quot;</span></span><br><span class="line">header = &#123;<span class="string">&quot;user-agent&quot;</span>: UA&#125;</span><br><span class="line">url = <span class="string">&quot;lanzoui.com&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swn</span>(<span class="params"><span class="built_in">str</span>: <span class="built_in">str</span>, start: <span class="built_in">str</span>, end: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">	r = <span class="built_in">str</span>.find(start)</span><br><span class="line">	re = <span class="built_in">str</span>.find(end, r + <span class="built_in">len</span>(start))</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">str</span>[r + <span class="built_in">len</span>(start):re - <span class="built_in">len</span>(end) + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file</span>(<span class="params">data</span>):</span></span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(data, <span class="built_in">str</span>):</span><br><span class="line">		file = data[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">		key = data[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		file = data</span><br><span class="line">		key = <span class="string">&#x27;&#x27;</span></span><br><span class="line">	html = requests.get(file, headers=header)</span><br><span class="line">	<span class="keyword">if</span> html.text.find(<span class="string">&quot;filemoreajax.php&quot;</span>) != -<span class="number">1</span>:  <span class="comment"># filer</span></span><br><span class="line">		r = html.text.find(<span class="string">&quot;data : &#123;&quot;</span>) + <span class="number">7</span></span><br><span class="line">		re = html.text.find(<span class="string">&quot;&#125;&quot;</span>, r)</span><br><span class="line">		text = html.text[r:re] + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">		text = text.strip()</span><br><span class="line">		ib = swn(html.text, <span class="string">&quot;&#x27;t&#x27;:&quot;</span>, <span class="string">&quot;,&quot;</span>)</span><br><span class="line">		ibs = swn(html.text, ib + <span class="string">&quot; = &#x27;&quot;</span>, <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">		ih = swn(html.text, <span class="string">&quot;&#x27;k&#x27;:&quot;</span>, <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">		ihs = swn(html.text, ih + <span class="string">&quot; = &#x27;&quot;</span>, <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">		text = text.replace(ib, <span class="string">&quot;&#x27;&quot;</span> + ibs + <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">		text = text.replace(ih, <span class="string">&quot;&#x27;&quot;</span> + ihs + <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">		text = text.replace(<span class="string">&quot;pgs&quot;</span>, <span class="string">&quot;&#x27;1&#x27;&quot;</span>)</span><br><span class="line">		text = text.replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">		<span class="keyword">if</span> key != <span class="string">&quot;&quot;</span>:</span><br><span class="line">			text = text.replace(<span class="string">&quot;:pwd&quot;</span>, <span class="string">&#x27;:&quot;&#x27;</span> + key + <span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			l = <span class="built_in">list</span>(text)</span><br><span class="line">			l.pop(text.rfind(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">			text = <span class="string">&#x27;&#x27;</span>.join(l)</span><br><span class="line">		<span class="comment"># print(text)</span></span><br><span class="line">		text = json.loads(text)</span><br><span class="line">		<span class="comment"># print(text)</span></span><br><span class="line">		html = requests.post(<span class="string">&quot;https://&quot;</span> + url + <span class="string">&quot;/filemoreajax.php&quot;</span>, headers=&#123;<span class="string">&quot;referer&quot;</span>: html.url, <span class="string">&quot;user-agent&quot;</span>: UA&#125;,</span><br><span class="line">		                     data=text)</span><br><span class="line"></span><br><span class="line">		data = json.loads(html.text)</span><br><span class="line">		<span class="keyword">if</span> data[<span class="string">&quot;info&quot;</span>] != <span class="string">&quot;sucess&quot;</span>:</span><br><span class="line">			<span class="keyword">return</span> &#123;<span class="string">&#x27;code&#x27;</span>: -<span class="number">1</span>, <span class="string">&#x27;info&#x27;</span>: data[<span class="string">&quot;info&quot;</span>]&#125;</span><br><span class="line">		<span class="comment"># return data</span></span><br><span class="line">		<span class="keyword">return</span> &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;info&#x27;</span>: html.text&#125;</span><br><span class="line">	<span class="keyword">if</span> html.text.find(<span class="string">&quot;输入密码&quot;</span>) != -<span class="number">1</span> <span class="keyword">and</span> key == <span class="string">&quot;&quot;</span>:</span><br><span class="line">		<span class="keyword">return</span> &#123;<span class="string">&#x27;code&#x27;</span>: -<span class="number">1</span>, <span class="string">&#x27;info&#x27;</span>: <span class="string">&quot;请输入密码!&quot;</span>&#125;</span><br><span class="line">	<span class="keyword">if</span> key == <span class="string">&quot;&quot;</span>:</span><br><span class="line">		start = html.text.find(<span class="string">&quot;src=\&quot;&quot;</span>)</span><br><span class="line">		start = html.text.find(<span class="string">&quot;src=\&quot;&quot;</span>, start + <span class="number">6</span>)  <span class="comment"># 找到目标</span></span><br><span class="line">		end = html.text.find(<span class="string">&quot;\&quot;&quot;</span>, start + <span class="number">6</span>)</span><br><span class="line">		html = requests.get(url=<span class="string">&quot;https://&quot;</span> + url + <span class="string">&quot;/&quot;</span> + html.text[start + <span class="number">6</span>:end])</span><br><span class="line">		data = html.text</span><br><span class="line">		start = data.find(<span class="string">&quot;var ajaxdata = &#x27;&quot;</span>)</span><br><span class="line">		end = data.find(<span class="string">&quot;&#x27;&quot;</span>, start + <span class="number">16</span>)</span><br><span class="line">		ajaxdata = data[start + <span class="number">16</span>:end]</span><br><span class="line">		start = data.find(<span class="string">&quot;&#x27;&quot;</span>, end + <span class="number">3</span>)</span><br><span class="line">		end = data.find(<span class="string">&quot;&#x27;&quot;</span>, start + <span class="number">1</span>)</span><br><span class="line">		postdown = data[start + <span class="number">1</span>:end]</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		start = html.text.find(<span class="string">&quot;&amp;sign=&quot;</span>)</span><br><span class="line">		postdown = html.text[start + <span class="number">6</span>:html.text.find(<span class="string">&quot;&amp;p=&quot;</span>, start + <span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line">	html = requests.post(url=<span class="string">&quot;https://&quot;</span> + url + <span class="string">&quot;/ajaxm.php&quot;</span>, headers=&#123;<span class="string">&quot;referer&quot;</span>: html.url, <span class="string">&quot;user-agent&quot;</span>: UA&#125;,</span><br><span class="line">	                     data=&#123;<span class="string">&quot;action&quot;</span>: <span class="string">&quot;downprocess&quot;</span>, <span class="string">&quot;sign&quot;</span>: postdown, <span class="string">&quot;p&quot;</span>: key&#125;)</span><br><span class="line">	data = json.loads(html.text)</span><br><span class="line">	<span class="keyword">if</span> data[<span class="string">&quot;url&quot;</span>] == <span class="number">0</span>:</span><br><span class="line">		<span class="keyword">return</span> &#123;<span class="string">&#x27;code&#x27;</span>: -<span class="number">1</span>, <span class="string">&#x27;info&#x27;</span>: data[<span class="string">&quot;inf&quot;</span>]&#125;</span><br><span class="line">	html = requests.get(url=data[<span class="string">&quot;dom&quot;</span>] + <span class="string">&quot;/file/&quot;</span> + data[<span class="string">&quot;url&quot;</span>], headers=&#123;</span><br><span class="line">		<span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.8&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>, &#125;, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">	<span class="keyword">return</span> &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;info&#x27;</span>: html.headers[<span class="string">&#x27;Location&#x27;</span>]&#125;  <span class="comment"># 获取重定向网址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(file(&quot;https://xihale.lanzoui.com/b015wmtfa&quot;, &quot;d8tb&quot;)) #测试</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以直接<code>from lanzou import file as lanzou_jx</code></p>
<p>然后<code>lanzou_jx(url,key)</code>来使用</p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Messages-强大的短链程序</title>
    <url>/messages/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前一阵子,在网上找<code>链接缩短</code>的开源项目,想搭一个这样的网站</p>
<p>谁知,要不就是太<code>癃肿</code>(一个链接缩短网站,要注册???),要不就没有我想要的<code>功能</code></p>
<p>所以,趁着最近学了下<code>PHP</code>的<code>header</code>和<code>PDO</code>(连接<code>mysql</code>的工具),就花了3天写了这个工具</p>
<h2 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h2><ol>
<li>基本功能<code>完全支持</code>+附加了<code>Text</code>(文本)的传递-其实就是<code>xurl</code>和<code>ti</code>的<code>合体</code></li>
<li>运用了PHP的<code>header</code>,<code>直接显示内容</code>,<code>不搞花里胡哨</code>的-<code>给予用户应得的尊重</code></li>
<li>运用了<code>$_SERVER</code>-代码部署方便</li>
</ol>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>来到了<code>简单</code>的部署环节(<code>不花里胡哨</code>)</p>
<ol>
<li><p>新建一个<code>数据库</code>,<code>用户名</code>和<code>密码</code>自定</p>
</li>
<li><p>把<code>数据库</code>,<code>用户名</code>和<code>密码</code>依次填入<code>config.php</code>的<code>dbname</code>,<code>username</code>和<code>password</code></p>
<blockquote>
<p>如果<code>数据库</code>不在<code>本地</code>,请修改<code>server</code></p>
<p>端口号修改的方法: 在<code>server</code>的最后加上<code>;port=端口</code></p>
</blockquote>
</li>
</ol>
<p>测试一下如果没有问题,就可以用了…</p>
<h2 id="短链接创建教程"><a href="#短链接创建教程" class="headerlink" title="短链接创建教程"></a>短链接创建教程</h2><ol>
<li><p>检查你的<code>val</code>是<code>链接</code>和<code>文本(Text)</code></p>
</li>
<li><p>选择<code>链接</code>或<code>文本(Text)</code> (如果你的<code>val</code>是<code>多行</code>的就<code>不用管</code>)</p>
</li>
<li><p>填表</p>
</li>
<li><p>创建</p>
<blockquote>
<p>无脑操作,主要是第2步难一点</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>git-学习</title>
    <url>/git/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li><p>连接你的账号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱&quot;</span><br></pre></td></tr></table></figure>
<p>1.2. 然后用<code>记事本</code>打开<code>C:\用户\用户名\\.ssh\id_rsa.pub</code><br>1.3. 复制里面的内容<br>1.4. 在云端的设置中找到<code>SSH keys</code>或<code>SSH 公钥</code><br>1.5. <code>新建</code>一个公钥并把刚刚复制的内容<code>粘贴</code>进<code>Key</code>或<code>公钥</code></p>
</li>
<li><p>在云端创建一个<code>存储库</code>,<code>不创建</code>任何文件</p>
<h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span> &gt;&gt; README.md <span class="comment">#新建一个README.md</span></span><br><span class="line">git init <span class="comment">#将此文件夹init</span></span><br><span class="line">git add README.md <span class="comment">#将README.md文件加入缓冲区</span></span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span> <span class="comment">#添加一个提交备注</span></span><br><span class="line">git branch -M main <span class="comment">#这里的main要对应远程的分区</span></span><br><span class="line">git remote add 快捷方式名 git@域名:用户名/库名.git <span class="comment">#此方法可创建多个快捷方式一起提交</span></span><br><span class="line">git push -u origin main <span class="comment">#提交到远程,与前面的main对应</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> <span class="string">&#x27;链接&#x27;</span>或<span class="string">&#x27;SSH&#x27;</span></span><br><span class="line">git pull <span class="string">&#x27;链接&#x27;</span>或<span class="string">&#x27;SSH&#x27;</span> <span class="string">&#x27;分支&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
