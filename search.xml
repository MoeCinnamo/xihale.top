<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Electron</title>
    <url>/1970/01/Electron/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章是赶出来的,所以写的不是很好</p>
<p>主要是讲了如何创建一个 Electron 项目</p>
<blockquote>
<p>注意: <code>Win</code>下的终端要用<code>cmd</code></p>
</blockquote>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>最好先搞个<code>cnpm</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>然后下载<code>Electron</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install -g electron &amp;&amp; cnpm install -g electron-forge</span><br></pre></td></tr></table></figure>
<p>如果执行成功,那就是安装好了</p>
<p>然后 <code>进入项目目录</code> 执行<code>init</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">electron-forge init &amp;&amp; cd node_modules\electron &amp;&amp; npm install</span><br></pre></td></tr></table></figure>
<p>最后,完成了项目的编写可以:</p>
<ol>
<li><p>调试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">electron-forge start</span><br></pre></td></tr></table></figure></li>
<li>运行<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">electron .</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><ol>
<li><p>最优方案</p>
<p>首先安装<code>electron-packager</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install electron-packager</span><br></pre></td></tr></table></figure>
<p>然后把这个加到<code>package.json</code>里的<code>scripts</code>里</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;packager&quot;: &quot;electron-packager ./ programName --platform=win32 --out=./OutApp &quot;</span><br></pre></td></tr></table></figure>
<p>最后运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run packager</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>官方方案(很慢)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run make</span><br></pre></td></tr></table></figure>
<p>如果失败了就先运行下面的代码(自行创建<code>app</code>文件夹)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//在根目录下</span><br><span class="line">npm uninstall electron-store --save //卸载electron-store这个包</span><br><span class="line">cd app &amp;&amp; npm install electron-store --save //在app目录下安装这个包，包的信息会添加到这个目录下的package.json</span><br><span class="line"></span><br><span class="line">//回到根目录</span><br><span class="line">npm run make//成功打包了！！！！</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//请使用 CommonJS 的格式写 require 而不是ES6</span></span><br><span class="line"><span class="keyword">const</span> &#123;app&#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="comment">//错误写法,这可能会编译不过</span></span><br><span class="line"><span class="keyword">import</span> &#123;app&#125; <span class="keyword">from</span> <span class="string">&#x27;electron&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>桌面软件</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-io</title>
    <url>/1970/01/Java-io/</url>
    <content><![CDATA[<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; <span class="comment">//引入</span></span><br><span class="line"></span><br><span class="line">Scanner input=<span class="keyword">new</span> Scanner(System.in); <span class="comment">//绑定输入流到input</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a=input.nextInt(); <span class="comment">//输入int,其他类型以此类推</span></span><br><span class="line">String s=input.next(); <span class="comment">//输入String</span></span><br></pre></td></tr></table></figure>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.print(str); <span class="comment">//直接输出</span></span><br><span class="line">System.out.println(str); <span class="comment">//输出加换行</span></span><br><span class="line">System.out.printf(<span class="string">&quot;...&quot;</span>[,...]); <span class="comment">//格式化输出,玩过c语言的都深有体会</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-磁盘分析</title>
    <url>/1970/01/Linux-%E7%A3%81%E7%9B%98%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>linux</code>占空间过大,需要软件进行分析</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>安装<code>ncdu</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install ndcu</span><br></pre></td></tr></table></figure>
<p>检测空间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ncdu -x /</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/1970/01/css%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Onedrive5T(E5的获取)</title>
    <url>/1970/01/Onedrive5T/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Office365开发版E5是为开发人员提供的，是微软的官方活动，申请Office 365开发者计划可以获得为期3个月的免费Office365 E5。 而E5计划就包含了25个用于所有Office 365 应用的许可证。如果嫌正版office365贵的话，这可是你免费获取office的好机会了！</p>
<p>PS:过程很麻烦！要有足够耐心，xihale遇到过很多错误！搞了一天！</p>
<p>需要材料：一个microsoft账号（用qq邮箱注册一个就行），一个github账号，一个有耐心的脑，一个外国代理，一个VPS/服务器</p>
<h2 id="申请e5账号"><a href="#申请e5账号" class="headerlink" title="申请e5账号:"></a>申请e5账号:</h2><ol>
<li>进入: <a href="https://developer.microsoft.com/zh-cn/microsoft-365/dev-program">Microsoft 365 开发人员计划</a></li>
<li>登录你的microsoft账号</li>
<li>然后填写信息（随便填）—开始挂代理（google验证码）</li>
<li>然后进入<a href="https://admin.microsoft.com/">Microsoft 365 admin center</a>管理用户，最多25个用户</li>
</ol>
<p>（现在开始，所有登录的账号都是刚刚填的”用户名@域.onmicrosoft.com”）</p>
<ol>
<li><p>进入<a href="https://office.com/">office</a>登录刚刚填的账号，打开onedrive—他会提示正在准备，到这里你就成功了（要等很久，最好过几个小时在看—我就等了1天才好！）</p>
</li>
<li><p>等待OneDrive可以用</p>
</li>
<li><p>默认空间是1t，进入<a href="https://www.imotao.com/go/?url=https://admin.onedrive.com/#v=StorageSettings">Onedrive-默认存储空间修改</a>，登录账号-点击存储-把1024改成5120</p>
</li>
</ol>
<p>试试可不可以正常使用！如果可以就成功了！</p>
<h2 id="设置自动续费"><a href="#设置自动续费" class="headerlink" title="设置自动续费"></a>设置自动续费</h2><blockquote>
<p>参考:<a href="https://qyi.io/archives/687.html">浅忆大佬-E5自动订阅程序</a></p>
<p>PS: 已经续了快1年了</p>
</blockquote>
<p>进入: <a href="https://e5.qyi.io/">E5续订</a>，登录<code>GitHub账号</code></p>
<ol>
<li>进入<a href="https://portal.azure.com/#home">Azure</a>，登录账号</li>
<li><p>搜索应用注册-注册一个新应用：</p>
<ol>
<li><p><code>重定向url</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://e5.qyi.io/outlook/auth2/receive</span><br></pre></td></tr></table></figure></li>
<li><code>受支持的账户类型</code>选<code>那个最长的</code></li>
</ol>
</li>
<li><p>复制”应用程序(客户端)ID”-粘贴到client_id里</p>
</li>
<li><p>点击证书和密码-创建一个客户端密码；复制密码填到client_secre里</p>
</li>
<li>点击授权</li>
</ol>
<h2 id="对接cloudreve网盘-未完成"><a href="#对接cloudreve网盘-未完成" class="headerlink" title="对接cloudreve网盘(未完成)"></a>对接cloudreve网盘(未完成)</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>进入<code>shell</code>界面输入(依赖<code>wget</code>):</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://toolwa.com/github/https://github.com/cloudreve/Cloudreve/releases/download/3.3.2/cloudreve_3.3.2_linux_arm.tar.gz</span><br><span class="line"> &amp;&amp; tar -zxvf cloudreve_3.3.2_linux_arm.tar.gz &amp;&amp; chome +x ./cloudreve &amp;&amp; ./cloudreve</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对接教程得等等,还没来得及写,所以先看视频吧</p>
</blockquote>
<p><a href="https://www.bilibili.com/video/BV1FZ4y1T7jn/">https://www.bilibili.com/video/BV1FZ4y1T7jn/</a></p>
]]></content>
      <categories>
        <category>白嫖 Onedrive</category>
      </categories>
      <tags>
        <tag>白嫖</tag>
        <tag>Onedrive</tag>
      </tags>
  </entry>
  <entry>
    <title>git-学习</title>
    <url>/1970/01/git/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li><p>连接你的账号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱&quot;</span><br></pre></td></tr></table></figure>
<p>1.2. 然后用<code>记事本</code>打开<code>C:\用户\用户名\\.ssh\id_rsa.pub</code><br>1.3. 复制里面的内容<br>1.4. 在云端的设置中找到<code>SSH keys</code>或<code>SSH 公钥</code><br>1.5. <code>新建</code>一个公钥并把刚刚复制的内容<code>粘贴</code>进<code>Key</code>或<code>公钥</code></p>
</li>
<li><p>在云端创建一个<code>存储库</code>,<code>不创建</code>任何文件</p>
<h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span> &gt;&gt; README.md <span class="comment">#新建一个README.md</span></span><br><span class="line">git init <span class="comment">#将此文件夹init</span></span><br><span class="line">git add README.md <span class="comment">#将README.md文件加入缓冲区</span></span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span> <span class="comment">#添加一个提交备注</span></span><br><span class="line">git branch -M main <span class="comment">#这里的main要对应远程的分区</span></span><br><span class="line">git remote add 快捷方式名 git@域名:用户名/库名.git <span class="comment">#此方法可创建多个快捷方式一起提交</span></span><br><span class="line">git push -u origin main <span class="comment">#提交到远程,与前面的main对应</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> <span class="string">&#x27;链接&#x27;</span>或<span class="string">&#x27;SSH&#x27;</span></span><br><span class="line">git pull <span class="string">&#x27;链接&#x27;</span>或<span class="string">&#x27;SSH&#x27;</span> <span class="string">&#x27;分支&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/1970/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>letsencrypt 证书生成</title>
    <url>/1970/01/letsencrypt/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>letsencrypt</code>是一个免费的<code>ssl</code>证书机构</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="安装certbot"><a href="#安装certbot" class="headerlink" title="安装certbot"></a>安装<code>certbot</code></h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install certbot</span><br></pre></td></tr></table></figure>
<h3 id="申请"><a href="#申请" class="headerlink" title="申请"></a>申请</h3><p>把<code>xihale.top</code>改成你要申请的域名即可<br>用户邮箱随便,中间的操作全部填<code>Y</code>,最后它会提示你改<code>TXT</code><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">certbot certonly --preferred-challenges dns --manual  -d *.xihale.top,xihale.top --server https://acme-v02.api.letsencrypt.org/directory</span><br></pre></td></tr></table></figure></p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>搞定没有报错就可以去<code>/etc/letsencrypt/live/xihale.top</code>获取<code>ssl</code>文件了</p>
]]></content>
      <categories>
        <category>letsencrypt</category>
      </categories>
      <tags>
        <tag>letsencrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>Messages-强大的短链程序</title>
    <url>/1970/01/messages/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前一阵子,在网上找<code>链接缩短</code>的开源项目,想搭一个这样的网站</p>
<p>谁知,要不就是太<code>癃肿</code>(一个链接缩短网站,要注册???),要不就没有我想要的<code>功能</code></p>
<p>所以,趁着最近学了下<code>PHP</code>的<code>header</code>和<code>PDO</code>(连接<code>mysql</code>的工具),就花了3天写了这个工具</p>
<h2 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h2><ol>
<li>基本功能<code>完全支持</code>+附加了<code>Text</code>(文本)的传递-其实就是<code>xurl</code>和<code>ti</code>的<code>合体</code></li>
<li>运用了PHP的<code>header</code>,<code>直接显示内容</code>,<code>不搞花里胡哨</code>的-<code>给予用户应得的尊重</code></li>
<li>运用了<code>$_SERVER</code>-代码部署方便</li>
</ol>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>来到了<code>简单</code>的部署环节(<code>不花里胡哨</code>)</p>
<ol>
<li><p>新建一个<code>数据库</code>,<code>用户名</code>和<code>密码</code>自定</p>
</li>
<li><p>把<code>数据库</code>,<code>用户名</code>和<code>密码</code>依次填入<code>config.php</code>的<code>dbname</code>,<code>username</code>和<code>password</code></p>
<blockquote>
<p>如果<code>数据库</code>不在<code>本地</code>,请修改<code>server</code></p>
<p>端口号修改的方法: 在<code>server</code>的最后加上<code>;port=端口</code></p>
</blockquote>
</li>
</ol>
<p>测试一下如果没有问题,就可以用了…</p>
<h2 id="短链接创建教程"><a href="#短链接创建教程" class="headerlink" title="短链接创建教程"></a>短链接创建教程</h2><ol>
<li><p>检查你的<code>val</code>是<code>链接</code>和<code>文本(Text)</code></p>
</li>
<li><p>选择<code>链接</code>或<code>文本(Text)</code> (如果你的<code>val</code>是<code>多行</code>的就<code>不用管</code>)</p>
</li>
<li><p>填表</p>
</li>
<li><p>创建</p>
<blockquote>
<p>无脑操作,主要是第2步难一点</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>python-蓝凑云直链解析</title>
    <url>/1970/01/python-lanzou/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>就是看到很多大佬写了,不过99%<code>没开源</code>,1%用的<code>e语言</code></p>
<p>所以,我先写个<code>py</code>版本的,然后再去做个<code>php</code>版的(有时间的话)</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>花了很多时间,遇到了很多<code>坑</code>,没有<code>注释</code>…</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># The code from xihale.top</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">UA = <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4537.0 Safari/537.36 Edg/93.0.926.1&quot;</span></span><br><span class="line">header = &#123;<span class="string">&quot;user-agent&quot;</span>: UA&#125;</span><br><span class="line">url = <span class="string">&quot;lanzoui.com&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swn</span>(<span class="params"><span class="built_in">str</span>: <span class="built_in">str</span>, start: <span class="built_in">str</span>, end: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">	r = <span class="built_in">str</span>.find(start)</span><br><span class="line">	re = <span class="built_in">str</span>.find(end, r + <span class="built_in">len</span>(start))</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">str</span>[r + <span class="built_in">len</span>(start):re - <span class="built_in">len</span>(end) + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file</span>(<span class="params">data</span>):</span></span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(data, <span class="built_in">str</span>):</span><br><span class="line">		file = data[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">		key = data[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		file = data</span><br><span class="line">		key = <span class="string">&#x27;&#x27;</span></span><br><span class="line">	html = requests.get(file, headers=header)</span><br><span class="line">	<span class="keyword">if</span> html.text.find(<span class="string">&quot;filemoreajax.php&quot;</span>) != -<span class="number">1</span>:  <span class="comment"># filer</span></span><br><span class="line">		r = html.text.find(<span class="string">&quot;data : &#123;&quot;</span>) + <span class="number">7</span></span><br><span class="line">		re = html.text.find(<span class="string">&quot;&#125;&quot;</span>, r)</span><br><span class="line">		text = html.text[r:re] + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">		text = text.strip()</span><br><span class="line">		ib = swn(html.text, <span class="string">&quot;&#x27;t&#x27;:&quot;</span>, <span class="string">&quot;,&quot;</span>)</span><br><span class="line">		ibs = swn(html.text, ib + <span class="string">&quot; = &#x27;&quot;</span>, <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">		ih = swn(html.text, <span class="string">&quot;&#x27;k&#x27;:&quot;</span>, <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">		ihs = swn(html.text, ih + <span class="string">&quot; = &#x27;&quot;</span>, <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">		text = text.replace(ib, <span class="string">&quot;&#x27;&quot;</span> + ibs + <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">		text = text.replace(ih, <span class="string">&quot;&#x27;&quot;</span> + ihs + <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">		text = text.replace(<span class="string">&quot;pgs&quot;</span>, <span class="string">&quot;&#x27;1&#x27;&quot;</span>)</span><br><span class="line">		text = text.replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">		<span class="keyword">if</span> key != <span class="string">&quot;&quot;</span>:</span><br><span class="line">			text = text.replace(<span class="string">&quot;:pwd&quot;</span>, <span class="string">&#x27;:&quot;&#x27;</span> + key + <span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			l = <span class="built_in">list</span>(text)</span><br><span class="line">			l.pop(text.rfind(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">			text = <span class="string">&#x27;&#x27;</span>.join(l)</span><br><span class="line">		<span class="comment"># print(text)</span></span><br><span class="line">		text = json.loads(text)</span><br><span class="line">		<span class="comment"># print(text)</span></span><br><span class="line">		html = requests.post(<span class="string">&quot;https://&quot;</span> + url + <span class="string">&quot;/filemoreajax.php&quot;</span>, headers=&#123;<span class="string">&quot;referer&quot;</span>: html.url, <span class="string">&quot;user-agent&quot;</span>: UA&#125;,</span><br><span class="line">		                     data=text)</span><br><span class="line"></span><br><span class="line">		data = json.loads(html.text)</span><br><span class="line">		<span class="keyword">if</span> data[<span class="string">&quot;info&quot;</span>] != <span class="string">&quot;sucess&quot;</span>:</span><br><span class="line">			<span class="keyword">return</span> &#123;<span class="string">&#x27;code&#x27;</span>: -<span class="number">1</span>, <span class="string">&#x27;info&#x27;</span>: data[<span class="string">&quot;info&quot;</span>]&#125;</span><br><span class="line">		<span class="comment"># return data</span></span><br><span class="line">		<span class="keyword">return</span> &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;info&#x27;</span>: html.text&#125;</span><br><span class="line">	<span class="keyword">if</span> html.text.find(<span class="string">&quot;输入密码&quot;</span>) != -<span class="number">1</span> <span class="keyword">and</span> key == <span class="string">&quot;&quot;</span>:</span><br><span class="line">		<span class="keyword">return</span> &#123;<span class="string">&#x27;code&#x27;</span>: -<span class="number">1</span>, <span class="string">&#x27;info&#x27;</span>: <span class="string">&quot;请输入密码!&quot;</span>&#125;</span><br><span class="line">	<span class="keyword">if</span> key == <span class="string">&quot;&quot;</span>:</span><br><span class="line">		start = html.text.find(<span class="string">&quot;src=\&quot;&quot;</span>)</span><br><span class="line">		start = html.text.find(<span class="string">&quot;src=\&quot;&quot;</span>, start + <span class="number">6</span>)  <span class="comment"># 找到目标</span></span><br><span class="line">		end = html.text.find(<span class="string">&quot;\&quot;&quot;</span>, start + <span class="number">6</span>)</span><br><span class="line">		html = requests.get(url=<span class="string">&quot;https://&quot;</span> + url + <span class="string">&quot;/&quot;</span> + html.text[start + <span class="number">6</span>:end])</span><br><span class="line">		data = html.text</span><br><span class="line">		start = data.find(<span class="string">&quot;var ajaxdata = &#x27;&quot;</span>)</span><br><span class="line">		end = data.find(<span class="string">&quot;&#x27;&quot;</span>, start + <span class="number">16</span>)</span><br><span class="line">		ajaxdata = data[start + <span class="number">16</span>:end]</span><br><span class="line">		start = data.find(<span class="string">&quot;&#x27;&quot;</span>, end + <span class="number">3</span>)</span><br><span class="line">		end = data.find(<span class="string">&quot;&#x27;&quot;</span>, start + <span class="number">1</span>)</span><br><span class="line">		postdown = data[start + <span class="number">1</span>:end]</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		start = html.text.find(<span class="string">&quot;&amp;sign=&quot;</span>)</span><br><span class="line">		postdown = html.text[start + <span class="number">6</span>:html.text.find(<span class="string">&quot;&amp;p=&quot;</span>, start + <span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line">	html = requests.post(url=<span class="string">&quot;https://&quot;</span> + url + <span class="string">&quot;/ajaxm.php&quot;</span>, headers=&#123;<span class="string">&quot;referer&quot;</span>: html.url, <span class="string">&quot;user-agent&quot;</span>: UA&#125;,</span><br><span class="line">	                     data=&#123;<span class="string">&quot;action&quot;</span>: <span class="string">&quot;downprocess&quot;</span>, <span class="string">&quot;sign&quot;</span>: postdown, <span class="string">&quot;p&quot;</span>: key&#125;)</span><br><span class="line">	data = json.loads(html.text)</span><br><span class="line">	<span class="keyword">if</span> data[<span class="string">&quot;url&quot;</span>] == <span class="number">0</span>:</span><br><span class="line">		<span class="keyword">return</span> &#123;<span class="string">&#x27;code&#x27;</span>: -<span class="number">1</span>, <span class="string">&#x27;info&#x27;</span>: data[<span class="string">&quot;inf&quot;</span>]&#125;</span><br><span class="line">	html = requests.get(url=data[<span class="string">&quot;dom&quot;</span>] + <span class="string">&quot;/file/&quot;</span> + data[<span class="string">&quot;url&quot;</span>], headers=&#123;</span><br><span class="line">		<span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.8&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>, &#125;, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">	<span class="keyword">return</span> &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;info&#x27;</span>: html.headers[<span class="string">&#x27;Location&#x27;</span>]&#125;  <span class="comment"># 获取重定向网址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(file(&quot;https://xihale.lanzoui.com/b015wmtfa&quot;, &quot;d8tb&quot;)) #测试</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以直接<code>from lanzou import file as lanzou_jx</code></p>
<p>然后<code>lanzou_jx(url,key)</code>来使用</p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Win-磁盘修复</title>
    <url>/1970/01/win-%E7%A3%81%E7%9B%98%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果一不小心把电脑的磁盘弄坏了(比如写入文件时突然断电)</p>
<h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><p><code>win+x</code>调出<code>PowerShell(管理员)</code></p>
<p>简单一步搞定</p>
<blockquote>
<p>C为坏了的盘符(如果是隐藏的可以先取消隐藏)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkdsk C: /f</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>xmysql-一个简单的mysql类</title>
    <url>/1970/01/xmysql/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近写一个聊天软件, server 端得用到 mysql </p>
<p>但是c++能用的库很少,所以我就对照<a href="https://blog.csdn.net/fengxinlinux/article/details/75675360">大佬rotation的c语言库</a>和官方api文档做了个c++的库</p>
<p>Bug肯定是还有的,不过正常使用应该没啥问题了</p>
<h4 id="xmysql"><a href="#xmysql" class="headerlink" title="xmysql"></a>xmysql</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> XMYSQL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XMYSQL</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql/mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">namespace</span> xihale&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">xmysql</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">xmysql</span>(); <span class="comment">//初始化类</span></span><br><span class="line">        <span class="built_in">xmysql</span>(string host,string username,string password,string dbname,<span class="keyword">unsigned</span> dbport=<span class="number">0</span>); <span class="comment">//连接数据库</span></span><br><span class="line">        ~<span class="built_in">xmysql</span>(); <span class="comment">//关闭数据库连接</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(string host,string username,string password,string dbname,<span class="keyword">unsigned</span> dbport=<span class="number">0</span>)</span></span>; <span class="comment">//连接数据库</span></span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; <span class="built_in">exec</span>(string _exec); <span class="comment">//执行数据库脚本</span></span><br><span class="line">        <span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">error</span><span class="params">()</span></span>; <span class="comment">//获取错误</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        MYSQL *mysql;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h4 id="xmysql-cpp"><a href="#xmysql-cpp" class="headerlink" title="xmysql.cpp"></a>xmysql.cpp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;xmysql.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> xihale;</span><br><span class="line"><span class="keyword">using</span> std::clog;</span><br><span class="line">xmysql::<span class="built_in">xmysql</span>()&#123;</span><br><span class="line">    mysql=<span class="built_in">mysql_init</span>(<span class="literal">NULL</span>); <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">if</span>(mysql==<span class="literal">NULL</span>)<span class="keyword">throw</span> <span class="string">&quot;初始化 mysql 失败&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">xmysql::<span class="built_in">xmysql</span>(string host,string username,string password,string dbname,<span class="keyword">unsigned</span> <span class="keyword">int</span> dbport)&#123;</span><br><span class="line">    <span class="built_in">xmysql</span>(); <span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">init</span>(host,username,password,dbname,dbport);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xmysql::init</span><span class="params">(string host,string username,string password,string dbname,<span class="keyword">unsigned</span> <span class="keyword">int</span> dbport)</span></span>&#123;</span><br><span class="line">    mysql=<span class="built_in">mysql_real_connect</span>(mysql,host.<span class="built_in">c_str</span>(),username.<span class="built_in">c_str</span>(),password.<span class="built_in">c_str</span>(),dbname.<span class="built_in">c_str</span>(),dbport,<span class="literal">NULL</span>,<span class="number">0</span>); <span class="comment">//默认</span></span><br><span class="line">    <span class="keyword">if</span>(mysql==<span class="literal">NULL</span>)<span class="keyword">throw</span> <span class="string">&quot;连接 mysql 失败&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;vector&lt;string&gt;&gt; xmysql::<span class="built_in">exec</span>(string _exec)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">mysql_query</span>(mysql,_exec.<span class="built_in">c_str</span>()))<span class="keyword">throw</span> <span class="string">&quot;数据库语句执行失败&quot;</span>;</span><br><span class="line">    MYSQL_RES *_result=<span class="built_in">mysql_store_result</span>(mysql);</span><br><span class="line">    <span class="keyword">if</span>(_result)&#123;</span><br><span class="line">        <span class="keyword">int</span> fields=<span class="built_in">mysql_num_fields</span>(_result);</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt;result;</span><br><span class="line">        MYSQL_ROW row;</span><br><span class="line">        <span class="keyword">while</span>((row=<span class="built_in">mysql_fetch_row</span>(_result)))&#123;</span><br><span class="line">            vector&lt;string&gt;s;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fields;++i)</span><br><span class="line">                s.<span class="built_in">push_back</span>(row[i]?row[i]:<span class="string">&quot;NULL&quot;</span>);</span><br><span class="line">            result.<span class="built_in">push_back</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">mysql_free_result</span>(_result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">mysql_field_count</span>(mysql)!=<span class="number">0</span>)<span class="keyword">throw</span> <span class="string">&quot;数据库语句执行失败&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> vector&lt;vector&lt;string&gt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">xmysql::error</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">mysql_error</span>(mysql);</span><br><span class="line">&#125;</span><br><span class="line">xmysql::~<span class="built_in">xmysql</span>()&#123;</span><br><span class="line">    <span class="built_in">mysql_close</span>(mysql);</span><br><span class="line">    <span class="built_in">mysql_library_end</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title>动态修改Referer欺骗服务器</title>
    <url>/1970/01/%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9referer/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在做<code>js(electron)</code>版本的蓝奏解析时,发现要修改<code>referer</code>发送请求,但是<code>chrome</code>内核不允许这样做</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><blockquote>
<p>依赖: <code>ipcMain</code>,<code>ipcRenderer</code></p>
</blockquote>
<p>在主进程创建窗口后添加: </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ipcMain.on(<span class="string">&#x27;lanzou&#x27;</span>,<span class="function">(<span class="params">event,args</span>) =&gt;</span> &#123;</span><br><span class="line">  session.defaultSession.webRequest.onBeforeSendHeaders(&#123;<span class="attr">urls</span>: [<span class="string">&quot;*://*/*&quot;</span>]&#125;, <span class="function">(<span class="params">details, callback</span>)=&gt;</span> &#123;</span><br><span class="line">    details.requestHeaders[<span class="string">&#x27;referer&#x27;</span>] = args;</span><br><span class="line">    callback(&#123;<span class="attr">requestHeaders</span>: details.requestHeaders&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在渲染进程内添加:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ipcRenderer.send(<span class="string">&#x27;lanzou&#x27;</span>,url);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注: <code>lanzou</code>是通讯的<code>key</code>,可以替换</p>
<p><code>*://*/*</code>是匹配的<code>url</code> 可修改</p>
<p>此方法会影响其他子进程,不过影响不大,主要看你改了啥,如果只是<code>referer</code>或<code>ua</code>应该不会又啥影响</p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
</search>
